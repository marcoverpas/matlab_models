%% Clear Environment
clearvars;    % Clear all variables
close all;    % Close all figures
clc;          % Clear Command Window

%% Set the working directory
cd('C:/Users/marco/My Drive/New Publications/Energy Economics 2024/Model');

%% Set sources of data
Source1 = '2020_coefficients_20quinq.csv';
Source2 = 'Tables - revised 2.xlsx';

%% Read as cell array (keeps text and numbers)
Data = readcell(Source1, 'Delimiter', ',');

%% Upload technical coefficients
coeff_data = Data(1:21, 1:21);

% Convert the numeric array to a cell array before assigning
coeff_data(:, 1) = num2cell((0:(size(coeff_data, 1) - 1))');
coeff_data(1, :) = num2cell(0:(size(coeff_data, 1) - 1));

%% Upload labour coefficients
labcoef_cell = Data(2:21, 22);
labcoef = cellfun(@(x) double(string(x)), labcoef_cell);

%% Upload capital coefficients
kappas_cell = Data(2:21, 23);
kappas = cellfun(@(x) double(string(x)), kappas_cell);

%% Upload emission coefficients
ems_cell = Data(2:21, 24);
ems = cellfun(@(x) double(string(x)), ems_cell);

%% Upload import shares
psis_cell = Data(2:21, 25);
psis = cellfun(@(x) double(string(x)), psis_cell);

%% Upload wage rates
ws_cell = Data(2:21, 27);
ws = cellfun(@(x) double(string(x)), ws_cell);

%% Upload mark-ups
mus_cell = Data(2:21, 28);
mus = cellfun(@(x) double(string(x)), mus_cell);

%% Upload government spending shares
zetas_cell = Data(2:21, 29);
zetas = cellfun(@(x) double(string(x)), zetas_cell);

%% Upload consumption shares
betas_cell = Data(2:21, 30);
betas = cellfun(@(x) double(string(x)), betas_cell);

%% Upload investment shares
iotas_cell = Data(2:21, 31);
iotas = cellfun(@(x) double(string(x)), iotas_cell);

%% Upload export shares
chis_cell = Data(2:21, 32);
chis = cellfun(@(x) double(string(x)), chis_cell);

%% Upload shares of intermediate imported inputs to total inputs for each industry
psi_ints_cell = Data(2:21, 33);
psi_ints = cellfun(@(x) double(string(x)), psi_ints_cell);

%% Upload labour market adjustment coefficients
gammaNs_cell = Data(2:21, 34);
gammaNs = cellfun(@(x) double(string(x)), gammaNs_cell);

%% Upload emission adjustment values
emis_adjs_cell = Data(2:21, 35);
emis_adjs = cellfun(@(x) double(string(x)), emis_adjs_cell);

%% Upload labour adjustment values
n_adjs_cell = Data(2:21, 36);
n_adjs = cellfun(@(x) double(string(x)), n_adjs_cell);

%% Upload initial values of stocks
bs_data = readmatrix(Source2, 'Sheet', 'BS_Matrix', 'Range', 'B1:H10');

%% Upload initial values of flows
tfm_data = readmatrix(Source2, 'Sheet', 'TFM_Matrix', 'Range', 'B1:I20');

%% Upload initial values of interest rates
int_data = readmatrix(Source2, 'Sheet', 'TFM_Matrix', 'Range', 'O2:O8');

%% Define time span
nPeriods = 30;

%% Define number of industries
nIndustries = 20;

%% Define number of scenarios
nScenarios = 2;

%% Define max iterations
max_iterations = 100;

%% Define condition to stop iterations
tolerance = 0.001;

%% Calibrate the model

% Define targets

% Targets: Stocks
bf0 = abs(bs_data(5,7)); % Actual value in 2021 (after reclassification) 
vw0 = abs(bs_data(9,1)); % Actual value in 2021 (after reclassification)
vz0 = abs(bs_data(9,2)); % Actual value in 2021 (after reclassification)
ew0 = abs(bs_data(6,1)); % Actual value in 2021 (after reclassification)
mw0 = abs(bs_data(2,1)); % Actual value in 2021 (after reclassification)
ez0 = abs(bs_data(6,2)); % Actual value in 2021 (after reclassification)
mz0 = abs(bs_data(2,2)); % Actual value in 2021 (after reclassification)
es0 = abs(bs_data(6,3)); % Actual value in 2021 (after reclassification)
bw0 = abs(bs_data(5,1)); % Actual value in 2021 (after reclassification)
bz0 = abs(bs_data(5,2)); % Actual value in 2021 (after reclassification)
bcb0 = abs(bs_data(5,6)); % Actual value in 2021 (after reclassification)
bb0 = abs(bs_data(5,5)); % Actual value in 2021 (after reclassification)
bs0 = abs(bs_data(5,4)); % Actual value in 2021 (after reclassification)
hw0 = abs(bs_data(1,1)); % Actual value in 2021 (after reclassification)
hz0 = abs(bs_data(1,2)); % Actual value in 2021 (after reclassification)
hs0 = abs(bs_data(1,6)); % Actual value in 2021 (after reclassification)
lf0 = abs(bs_data(3,3)); % Actual value in 2021 (after reclassification)
ls0 = abs(bs_data(3,5)); % Actual value in 2021 (after reclassification)
ms0 = abs(bs_data(2,5)); % Actual value in 2021 (after reclassification)
lw0 = abs(bs_data(3,1)); % Actual value in 2021 (after reclassification)
lz0 = abs(bs_data(3,2)); % Actual value in 2021 (after reclassification)
hb0 = abs(bs_data(1,5)); % Actual value in 2021 (after reclassification)
k0 = abs(bs_data(8,3)); % Actual value in 2021 (after reclassification)
qw0 = abs(bs_data(7,1)); % Actual value in 2021 (after reclassification)
qz0 = abs(bs_data(7,2)); % Actual value in 2021 (after reclassification)
qs0 = abs(bs_data(7,7)); % Actual value in 2021 (after reclassification)

%% Targets: Flows
wb0 = abs(tfm_data(7,3));      % Steady state value (close to actual value in 2020, based on IO data)
ctot0 = abs(tfm_data(1,3));    % Actual value in 2021 (after reclassification)
id0 = abs(tfm_data(2,3));      % Actual value in 2021 (after reclassification)
ex0 = abs(tfm_data(4,3));      % Actual value in 2021 (after reclassification)
cw0 = abs(tfm_data(1,1));      % Actual value in 2021 (after reclassification)
im0 = abs(tfm_data(5,3));      % Actual value in 2021 (after reclassification)
tax0 = abs(tfm_data(11,5));    % Actual value in 2021 (after reclassification)
taxw0 = abs(tfm_data(11,1));   % Actual value in 2021 (after reclassification)
taxz0 = abs(tfm_data(11,2));   % Actual value in 2021 (after reclassification)
cz0 = abs(tfm_data(1,2));      % Actual value in 2021 (after reclassification)
gov0 = abs(tfm_data(3,3));     % Actual value in 2021 (after reclassification)
yn0 = ctot0 + id0 + gov0 + ex0 - im0;  % Actual value in 2021

%% Other initial value
paymw_b0 = abs(tfm_data(16,1)); % Actual value in 2021 (after reclassification)
paymz_b0 = abs(tfm_data(16,2)); % Actual value in 2021 (after reclassification)
paymb_b0 = abs(tfm_data(16,6)); % Actual value in 2021 (after reclassification)
paym_b0 = abs(tfm_data(16,5));  % Actual value in 2021 (after reclassification)
paymf_b0 = abs(tfm_data(16,8)); % Actual value in 2021 (after reclassification)
paymw_h0 = abs(tfm_data(14,1)); % Actual value in 2021 (after reclassification)                                          
paymz_h0 = abs(tfm_data(14,2)); % Actual value in 2021 (after reclassification)                                          
paym_h0 = paymw_h0 + paymz_h0;  % Actual value in 2021 (after reclassification)                             
paym_l0 = abs(tfm_data(14,3));  % Actual value in 2021 (after reclassification)                                         
paymw_e0 = abs(tfm_data(17,1)); % Actual value in 2021 (after reclassification)                                        
paymz_e0 = abs(tfm_data(17,2)); % Actual value in 2021 (after reclassification)                                          
paym_e0 = abs(tfm_data(17,3));  % Actual value in 2021 (after reclassification)  
paymw_q0 = abs(tfm_data(18,1)); % Actual value in 2021 (after reclassification)                                          
paymz_q0 = abs(tfm_data(18,2)); % Actual value in 2021 (after reclassification)                                          
paym_q0 = paymw_q0 + paymz_q0;  % Actual value in 2021 (after reclassification)              

%% Define tools that are calibrated to achieve targets
alpha1w = zeros(nScenarios, nPeriods);
alpha1z = zeros(nScenarios, nPeriods);
deltaw = zeros(nScenarios, nPeriods);
deltaz = zeros(nScenarios, nPeriods);
delta = zeros(nScenarios, nPeriods);
rho = zeros(nScenarios, nPeriods);
tauw1 = zeros(nScenarios, nPeriods);
tauw2 = zeros(nScenarios, nPeriods);
lambdacw = zeros(nScenarios, nPeriods);
lambdacz = zeros(nScenarios, nPeriods);
lambda20w = zeros(nScenarios, nPeriods);
lambda20z = zeros(nScenarios, nPeriods);
lambda30w = zeros(nScenarios, nPeriods);
lambda30z = zeros(nScenarios, nPeriods);
lambda40z = zeros(nScenarios, nPeriods);                                               
lambda40w = zeros(nScenarios, nPeriods);                                             

%% Set other parameters and exogenous variables
gk = 0;          % (steady-state condition) - Accumulation rate (growth rate of kt)
gf = 0;          % (steady-state condition) - Growth rate of world economy
r_bar0 = 0;      % (based on observed data in 2020) - Value of policy rate (= rate on advances)
r_f0 = r_bar0;   % (equilibrium condition) - Value of foreign policy rate
alpha1w_1 = 0;   % (not activated) - Interest rate elasticity of workers' propensity to consume out of income
alpha2w = 0.07;  % (based on observed data and J curve) - Propensity to consume out of workers' wealth
alpha2z = 0.05;  % (based on observed data and J curve) - Propensity to consume out of rentiers' wealth
gamma = 0.15;    % (slow adjustment: 95% in 18 years) - Speed of adjustment of current investment to target level
eta = 0;         % (equilibrium condition) - Share of undistributed corporate profit (in addition to AF)
thetaw0 = 0.11;  % (realistic estimate -> realistic deltaw) - Autonomous component in workers' gross loans to disposable income ratio 
thetaw1 = 0.1;   % (realistic estimate -> realistic deltaw) - Elasticity of Lw/YDw to interest rate 
thetaz0 = 0.11;  % (realistic estimate -> realistic deltaz) - Autonomous component in rentiers' gross loans to disposable income ratio 
thetaz1 = 0.1;   % (realistic estimate -> realistic deltaz) - Elasticity of Lz/YDz to interest rate 
sigmaw = 0.3;    % (moderate response to infl. deviation) - Adjustment coefficient of workers' inflation expectations 
sigmaz = 0.3;    % (moderate response to infl. deviation) - Adjustment coefficient of rentiers' inflation expectations
PI_t = 0.02;     % (ECB target) - Target inflation rate 
tauz0 = 0.1867;  % (calibrated to obtain tauw2 = 0.33) - Average tax rate on capital incomes
tauv0 = 0.005;   % (based on observed data in 2020) - Average tax rate on wealth
nu1 = 1.2;       % (based on J curve) - Price elasticity of import
nu2 = 0.8;       % (based on J curve) - Income elasticity of import
nu0 = log(im0) + nu1*log(1) - nu2*log(yn0); % Autonomous import (calculated to match im=im0)
eps0 = -2.1;     % (Godley and Lavoie 2007) - Autonomous export
eps1 = 1.2;      % (based on J curve) - Price elasticity of export
eps2 = 1;        % (Godley and Lavoie 2007) - Foreign income elasticity of export
yf0 = exp((log(ex0)-eps0+eps1*log(1))/eps2); % Initial value of foreign income (calculated to match ex=ex0)
mul0 = int_data(1,1);   % (based on observed data in 2020) - Risk premium on loans
mum0 = int_data(2,1);   % (based on observed data in 2020) - Risk premium on deposits
mue0 = int_data(3,1);   % (based on observed data in 2020) - Risk premium on private securities
mub0 = int_data(4,1);   % (based on observed data in 2020) - Risk premium on government securities
mur0 = int_data(5,1);   % (based on observed data in 2020) - Interest cut on reserves at CB
muf0 = int_data(6,1);   % (based on observed data in 2020) - Risk premium on foreign securities
phi0 = 0.30;     % (medium adjustment: 95% in 8 years) - Value of speeds of adjustment of natural output to current one
gammag0 = 0.15;  % (slow adjustment: 95% in 18 years) - Adjustment rate of government spending (austerity rate)
omega = 0.05;    % (based on observed data in 2020) - Share of managerial salaries to total labour incomes
sxr10 = 0.25;    % (medium adjustment: 95% in 10 years) - Speed of convergence of expected exchange rate to long-run value
sxr20 = 0.0001;  % (tiny correction) - Adjustment of target exchange rate to cab imbalances
renewD0 = 0.4;   % Average 2020-2025 (Reuters) - Percentage of renewable energy sources          
renewA0 = 0.2;   % (Food times) - Percentage of green agriculture
renewE0 = 0.5;   % (no data) - Percentage of green water supply, sewerage and waste manag.
renewF0 = 0.05;  % (Statista) - Percentage of green construction
renewH0 = 0.8;   % (Alternative food obs., 2024) - Percentage of green transportation
varepsA0 = 665.9558547; % Our calculations - Emission coefficient of non-green agriculture  
varepsD0 = 1066.317439; % Our calculations - Emission coefficient of non-renewable D
varepsE0 = 900.6039201; % Our calculations - Emission coefficient of non-green water supply...  
varepsF0 = 19.44997319; % Our calculations - Emission coefficient of non-green construction  
varepsH0 = 725.8496567; % Our calculations - Emission coefficient of non-green transportation 

%% Set portfolio parameters
lambda21w = -0.0334; % Workers' elasticity of gov. sec. demand to deposit rate
lambda22w = 0.1;     % Workers' elasticity of gov. sec. demand to gov. sec. rate
lambda23w = -0.0333; % Workers' elasticity of gov. sec. demand to private sec. rate 
lambda24w = -0.01;   % Workers' elasticity of gov. sec. demand to liquidity
lambda25w = -0.0333; % Workers' elasticity of gov. sec. demand to for. sec. rate
lambda21z = -0.0334; % Rentiers' elasticity of gov. sec. demand to deposit rate
lambda22z = 0.1;     % Rentiers' elasticity of gov. sec. demand to gov. sec. rate
lambda23z = -0.0333; % Rentiers' elasticity of gov. sec. demand to private sec. rate 
lambda24z = -0.01;   % Rentiers' elasticity of gov. sec. demand to liquidity
lambda25z = -0.0333; % Rentiers' elasticity of gov. sec. demand to for. sec. rate
lambda31w = -0.0334; % Workers' elasticity of private sec. demand to deposit rate
lambda32w = -0.0333; % Workers' elasticity of private sec. demand to gov. sec. rate
lambda33w = 0.1;     % Workers' elasticity of private sec. demand to private sec. rate
lambda34w = -0.01;   % Workers' elasticity of private sec. demand to liquidity
lambda35w = -0.0333; % Workers' elasticity of private sec. demand to for. sec. rate
lambda31z = -0.0334; % Rentiers' elasticity of private sec. demand to deposit rate
lambda32z = -0.0333; % Rentiers' elasticity of private sec. demand to gov. sec. rate
lambda33z = 0.1;     % Rentiers' elasticity of private sec. demand to private sec. rate
lambda34z = -0.01;   % Rentiers' elasticity of private sec. demand to liquidity
lambda35z = -0.0333; % Rentiers' elasticity of private sec. demand to for. sec. rate
lambda41w = -0.0334; % Workers' elasticity of foreign sec. demand to deposit rate
lambda42w = -0.0333; % Workers' elasticity of foreign sec. demand to gov. sec. rate
lambda43w = -0.0333; % Workers' elasticity of foreign sec. demand to private sec. rate
lambda44w = -0.01;   % Workers' elasticity of foreign sec. demand to liquidity
lambda45w = 0;       % Workers' elasticity of foreign sec. demand to for. sec. rate
lambda41z = -0.0334; % Rentiers' elasticity of foreign sec. demand to deposit rate
lambda42z = -0.0333; % Rentiers' elasticity of foreign sec. demand to gov. sec. rate
lambda43z = -0.0333; % Rentiers' elasticity of foreign sec. demand to private sec. rate
lambda44z = -0.01;   % Rentiers' elasticity of foreign sec. demand to liquidity
lambda45z = 0;       % Rentiers' elasticity of foreign sec. demand to for. sec. rate

% Note: betaw, betaz, iota, zeta, chi, psi, mup1 are
% defined in such a way to match actual output composition

%% Set coefficients that calibrated or shocked 
alpha0w = zeros(nScenarios, nPeriods);            % Autonomous consumption of workers
alpha0z = zeros(nScenarios, nPeriods);            % Autonomous consumption of rentiers
r_bar = repmat(r_bar0, nScenarios, nPeriods);     % Domestic policy rate
r_f = repmat(r_f0, nScenarios, nPeriods);         % Foreign policy rate
mul = repmat(mul0, nScenarios, nPeriods);         % Risk premium on loans
mum = repmat(mum0, nScenarios, nPeriods);         % Risk premium on deposits
mue = repmat(mue0, nScenarios, nPeriods);         % Risk premium on private securities
mub = repmat(mub0, nScenarios, nPeriods);         % Risk premium on government securities
mur = repmat(mur0, nScenarios, nPeriods);         % Interest cut on reserves at CB
muf = repmat(muf0, nScenarios, nPeriods);         % Risk premium on foreign bills 
tauz = repmat(tauz0, nScenarios, nPeriods);       % Average tax rate on capital incomes
tauv = repmat(tauv0, nScenarios, nPeriods);       % Average tax rate on wealth
sigmaxr1 = repmat(sxr10, nScenarios, nPeriods);   % Speed of convergence of expected exchange rate
sigmaxr2 = repmat(sxr20, nScenarios, nPeriods);   % Adjustment of target exchange rate to cab imbalances 
gammag = repmat(gammag0, nScenarios, nPeriods);   % Adjustment rate of government spending

%% Define industry-specific variables and coefficients as arrays 
x = zeros(nScenarios, nPeriods, nIndustries);          % Real gross output
d = zeros(nScenarios, nPeriods, nIndustries);          % Final domestic demand in real terms
kappa = zeros(nScenarios, nPeriods, nIndustries);      % Target capital to output ratios
betaw = zeros(nScenarios, nPeriods, nIndustries);      % Shares of real consumption of workers
betaz = zeros(nScenarios, nPeriods, nIndustries);      % Shares of real consumption of rentiers
iota = zeros(nScenarios, nPeriods, nIndustries);       % Shares of real investment
zeta = zeros(nScenarios, nPeriods, nIndustries);       % Initial values for shares of real government spending
chi = zeros(nScenarios, nPeriods, nIndustries);        % Shares of real export 
psi = zeros(nScenarios, nPeriods, nIndustries);        % Shares of real import to total import
psi_int = zeros(nScenarios, nPeriods, nIndustries);    % Shares imported inputs to total inputs
p = ones(nScenarios, nPeriods, nIndustries);           % Norm. unit prices of domestic outputs
p_im = ones(nScenarios, nPeriods, nIndustries);        % Norm. unit prices of imports
p_init = ones(nScenarios, nPeriods, nIndustries);      % Initial non-norm. values of unit prices
mup = zeros(nScenarios, nPeriods, nIndustries);        % Markups
w = zeros(nScenarios, nPeriods, nIndustries);          % Wage rates
n = zeros(nScenarios, nPeriods, nIndustries);          % Employment levels
mup0 = zeros(nScenarios, nPeriods, nIndustries);       % Markups: initial values
mup1 = zeros(nScenarios, nPeriods, nIndustries);       % Vector of sensitivities of markups to output gaps
lab = zeros(nScenarios, nPeriods, nIndustries);        % Labour coefficients
pr = zeros(nScenarios, nPeriods, nIndustries);         % Auxiliary entry: labour productivities
xN = zeros(nScenarios, nPeriods, nIndustries);         % Natural output
phi = repmat(phi0, nScenarios, nPeriods, nIndustries); % Speed of adjustment of natural output to current one
I_col = ones(nScenarios, nPeriods, nIndustries);       % Column vector of 1s
fin_i_j = zeros(nScenarios, nPeriods, nIndustries);    % Initial finance in each industry             
fin_f_j = zeros(nScenarios, nPeriods, nIndustries);    % Final finance in each industry
pf_j = zeros(nScenarios, nPeriods, nIndustries);       % Firms profit in each industry
cost_j = zeros(nScenarios, nPeriods, nIndustries);     % Total cost in each industry
rev_j = zeros(nScenarios, nPeriods, nIndustries);      % Total revenue in each industry
k_j = zeros(nScenarios, nPeriods, nIndustries);        % Real capital stock in each industry
kt_j = zeros(nScenarios, nPeriods, nIndustries);       % Target capital stock in each industry
id_j = zeros(nScenarios, nPeriods, nIndustries);       % Real investment in each industry
vareps = zeros(nScenarios, nPeriods, nIndustries);     % Emissions coefficients 
emis_j = zeros(nScenarios, nPeriods, nIndustries);     % Greenhouse gas emissions per industry
emis_adj = zeros(nScenarios, nPeriods, nIndustries);   % Adjustment to match actual emissions in 2021
im_int = zeros(nScenarios, nPeriods, nIndustries);     % Vector of real intermediate imports 
im_fin = zeros(nScenarios, nPeriods, nIndustries);     % Vector of real final imports
gov_j = zeros(nScenarios, nPeriods, nIndustries);      % Government spending by industry
g0_j = zeros(nScenarios, nPeriods, nIndustries);       % Shock to government spending by industry
gammaN = zeros(nScenarios, nPeriods, nIndustries);     % Industry-specific speed of adjustment of employment to shocks
n_adj = zeros(nScenarios, nPeriods, nIndustries);      % Adjustment to match actual employment in 2021

%% Create matrix of coefficients 
A = zeros(nIndustries, nIndustries);                   % 2D matrix of technical coefficients
B = zeros(nIndustries, nIndustries);                   % Auxiliary 2D matrix of technical coefficients
I = eye(nIndustries);                                  % 2D diagonal matrix
A4 = zeros(nScenarios, nPeriods, nIndustries, nIndustries); % 4D matrix of technical coefficients

%% Define other variables as matrices 
emp = zeros(nScenarios, nPeriods);                % Total employment (demand for labour)
yg = zeros(nScenarios, nPeriods);                 % Nominal gross output
yn = zeros(nScenarios, nPeriods);                 % Nominal net output (or net income or value added)
c = zeros(nScenarios, nPeriods);                  % Total nominal consumption
cw = zeros(nScenarios, nPeriods);                 % Real consumption of workers
cz = zeros(nScenarios, nPeriods);                 % Real consumption of rentiers
gov = zeros(nScenarios, nPeriods);                % Government spending
taxw = zeros(nScenarios, nPeriods);               % Taxes paid workers
taxz = zeros(nScenarios, nPeriods);               % Taxes paid by rentiers
tax = zeros(nScenarios, nPeriods);                % Total taxes
def = zeros(nScenarios, nPeriods);                % Government deficit
id = zeros(nScenarios, nPeriods);                 % Real investment
da = zeros(nScenarios, nPeriods);                 % Real depreciation of capital
af = zeros(nScenarios, nPeriods);                 % Amortization funds
ex = zeros(nScenarios, nPeriods);                 % Real export 
im = zeros(nScenarios, nPeriods);                 % Real import 
nim_int = zeros(nScenarios, nPeriods);            % Nominal intermediate import 
nim_fin = zeros(nScenarios, nPeriods);            % Nominal final import
px = ones(nScenarios, nPeriods);                  % Average price of export 
pm = ones(nScenarios, nPeriods);                  % Average price of import 
bf = repmat(bf0, nScenarios, nPeriods);           % Domestic bills held by foreign sector 
pw = ones(nScenarios, nPeriods);                  % Average price of workers' consumption
pz = ones(nScenarios, nPeriods);                  % Average price of rentiers' consumption
pid = ones(nScenarios, nPeriods);                 % Average price of investment
pg = ones(nScenarios, nPeriods);                  % Average price of government spending
pindex = ones(nScenarios, nPeriods);              % General price index 
PIw = zeros(nScenarios, nPeriods);                % Actual inflation faced by workers 
PIz = zeros(nScenarios, nPeriods);                % Actual inflation faced by rentiers 
PIw_e = zeros(nScenarios, nPeriods);              % Inflation expectations of workers 
PIz_e = zeros(nScenarios, nPeriods);              % Inflation expectations of rentiers 
pw_e = ones(nScenarios, nPeriods);                % Workers' expected price level 
pz_e = ones(nScenarios, nPeriods);                % Rentiers' expected price level 
ydw = zeros(nScenarios, nPeriods);                % Disposable income of workers
wb = zeros(nScenarios, nPeriods);                 % Wage bill
paymw_m = zeros(nScenarios, nPeriods);            % Interest payments on deposits held by workers
paymw_e = zeros(nScenarios, nPeriods);            % Interest payments on securities held by workers       
paym_l = zeros(nScenarios, nPeriods);             % Interest payments on loans to firms       
ydz = zeros(nScenarios, nPeriods);                % Disposable income of rentiers
pB = zeros(nScenarios, nPeriods);                 % Profit of banks
pf = zeros(nScenarios, nPeriods);                 % Profit of firms
upf = zeros(nScenarios, nPeriods);                % Retained or undistributed profit (in addition to AF)
paymz_m = zeros(nScenarios, nPeriods);            % Interest payments on deposits held by rentiers
paym_m = zeros(nScenarios, nPeriods);             % Total interest payments on deposits
paymz_e = zeros(nScenarios, nPeriods);            % Interest payments on securities held by rentiers 
paym_e = zeros(nScenarios, nPeriods);             % Total interest payments on private securities 
paymw_b = zeros(nScenarios, nPeriods);            % Interest payments on government bills held by workers
paymz_b = zeros(nScenarios, nPeriods);            % Interest payments on government bills held by rentiers
paymb_b = zeros(nScenarios, nPeriods);            % Interest payments on government bills held by banks
paym_b = zeros(nScenarios, nPeriods);             % Total interest payments on government bills 
paymf_b = zeros(nScenarios, nPeriods);            % Interest payments on government bills held by foreign sector 
paym_a = zeros(nScenarios, nPeriods);             % Interest payments on advances from CB
paym_r = zeros(nScenarios, nPeriods);             % Interest payments on reserves at CB
yd = zeros(nScenarios, nPeriods);                 % Total disposable income
vw = repmat(vw0, nScenarios, nPeriods);          % Net wealth of workers
vz = repmat(vz0, nScenarios, nPeriods);          % Net wealth of rentiers
vh = vw + vz;                                    % Total net wealth
ew = repmat(ew0, nScenarios, nPeriods);          % Demand for private securities by workers
mw = repmat(mw0, nScenarios, nPeriods);          % Bank deposits held by workers by workers
ez = repmat(ez0, nScenarios, nPeriods);          % Deman for private securities by rentiers
mz = repmat(mz0, nScenarios, nPeriods);          % Bank deposits held by workers by rentiers
eh = ew + ez;                                    % Total demand for private securities
mh = mw + mz;                                    % Total bank deposits held by workers
es = repmat(es0, nScenarios, nPeriods);          % Supply of private securities
bw = repmat(bw0, nScenarios, nPeriods);          % Deman for government bills by workers
bz = repmat(bz0, nScenarios, nPeriods);          % Deman for government bills by rentiers
bh = bw + bz;                                    % Total private demand for government bills
bcb = repmat(bcb0, nScenarios, nPeriods);        % CB demand for government bills
bb = repmat(bb0, nScenarios, nPeriods);          % Bills held by banks
bs = repmat(bs0, nScenarios, nPeriods);          % Supply of government bills
hw = repmat(hw0, nScenarios, nPeriods);          % Demand for cash by workers
hz = repmat(hz0, nScenarios, nPeriods);          % Demand for cash by rentiers
hh = hw + hz;                                    % Total demand for cash
hb = repmat(hb0, nScenarios, nPeriods);          % Reserves
hs = repmat(hs0, nScenarios, nPeriods);          % Supply of cash and reserves
ad = zeros(nScenarios, nPeriods);                % Advances
as = zeros(nScenarios, nPeriods);                % Advances
k = repmat(k0, nScenarios, nPeriods);            % Real stock of fixed capital  
kt = repmat(k0, nScenarios, nPeriods);           % Target stock of capital  
kn = k;                                          % Nominal value of capital stock  
fin_i = zeros(nScenarios, nPeriods);             % Initial finance             
fin_f = zeros(nScenarios, nPeriods);             % Final finance
lf = repmat(lf0, nScenarios, nPeriods);         % Firms' demand for loans  
ls = repmat(ls0, nScenarios, nPeriods);         % Supply of loans
ms = repmat(ms0, nScenarios, nPeriods);         % Supply of deposits
rm = zeros(nScenarios, nPeriods);                % Interest rate on deposits
rl = zeros(nScenarios, nPeriods);                % Interest rate on loans
re = zeros(nScenarios, nPeriods);                % Rate of return on private securities 
rb = zeros(nScenarios, nPeriods);                % Rate of return on government securities 
ra = zeros(nScenarios, nPeriods);                % Interest rate on advances 
rr = zeros(nScenarios, nPeriods);                % Interest on rate on reserves 
lw = repmat(lw0, nScenarios, nPeriods);          % Personal loans to workers 
lz = repmat(lz0, nScenarios, nPeriods);          % Personal loans to rentiers 
thetaw = zeros(nScenarios, nPeriods);            % Workers' gross loans to disposable income ratio 
thetaz = zeros(nScenarios, nPeriods);            % Rentiers' gross loans to disposable income ratio  
paymw_h = zeros(nScenarios, nPeriods);           % Workers' interest payments on personal loans 
paymz_h = zeros(nScenarios, nPeriods);           % Rentiers' interest payments on personal loans 
paym_h = zeros(nScenarios, nPeriods);            % Total interest payments on personal loans 
ld = ls;                                         % Total demand for loans 
qz = repmat(qz0, nScenarios, nPeriods);          % Foreign bills demanded by rentiers   
qw = repmat(qw0, nScenarios, nPeriods);          % Foreign bills held by workers 
qh = qw + qz;                                    % Total foreign bills held by domestic investors
qs = qh;                                         % Foreign bills held by domestic sectors
paym_q = zeros(nScenarios, nPeriods);            % Total interest payments on foreign bills 
paymz_q = zeros(nScenarios, nPeriods);           % Interest payments on foreign bills received by rentiers    
paymw_q = zeros(nScenarios, nPeriods);           % Interest payments on foreign bills received by workers  
rq = zeros(nScenarios, nPeriods);                % Interest rate on foreign bills 
tb = zeros(nScenarios, nPeriods);                % Trade balance
cab = zeros(nScenarios, nPeriods);               % Current account balance
niip = zeros(nScenarios, nPeriods);              % Net international investment position
emis = zeros(nScenarios, nPeriods);              % Greenhouse gas emissions
xr = ones(nScenarios, nPeriods);                 % Current exchange rate
xr0 = zeros(nScenarios, nPeriods);               % Shock to current exchange rate
xre = ones(nScenarios, nPeriods);                % Expected exchange rate
rcg = zeros(nScenarios, nPeriods);               % Percentage capital gains on foreign sec.
cgw = zeros(nScenarios, nPeriods);               % Total capital gains on workers' foreign sec.
cgz = zeros(nScenarios, nPeriods);               % Total capital gains on rentiers' foreign sec.
yf = repmat(yf0, nScenarios, nPeriods);         % World income in export calculations
xr_t = ones(nScenarios, nPeriods);               % Target or long-run exchange rate
varepsD = repmat(varepsD0, nScenarios, nPeriods); % Emission coefficient of non-renewable D
varepsA = repmat(varepsA0, nScenarios, nPeriods); % Emission coefficient of non-green A
varepsE = repmat(varepsE0, nScenarios, nPeriods); % Emission coefficient of non-green E
varepsF = repmat(varepsF0, nScenarios, nPeriods); % Emission coefficient of non-green F
varepsH = repmat(varepsH0, nScenarios, nPeriods); % Emission coefficient of non-green H
renewD = repmat(renewD0, nScenarios, nPeriods);   % Percentage of non-renewable energy sources
renewA = repmat(renewA0, nScenarios, nPeriods);   % Percentage of green agriculture
renewE = repmat(renewE0, nScenarios, nPeriods);   % Percentage of green water supply, sewerage and waste management
renewF = repmat(renewF0, nScenarios, nPeriods);   % Percentage of green construction
renewH = repmat(renewH0, nScenarios, nPeriods);   % Percentage of green transportation

%% Attribute (initial) values to arrays (if different across industries)

% Define seed of pseudo-random values 
% rng(27);

% Define initial values for remaining coefficients and initialise government expenditures
for z = 1:nIndustries
    betaw(:,:,z) = betas(z,1);                     % Real consumption shares of workers
    betaz(:,:,z) = betas(z,1);                     % Real consumption shares of rentiers
    iota(:,:,z) = iotas(z,1);                      % Real investment shares of firms
    zeta(:,:,z) = zetas(z,1);                      % Initial values for real spending shares of government
    chi(:,:,z) = chis(z,1);                        % Real export shares
    psi(:,:,z) = psis(z,1);                        % Real import shares
    lab(:,:,z) = labcoef(z,1)*100;                 % Labour coefficients
    kappa(:,:,z) = kappas(z,1);                    % Capital to output ratios
    vareps(:,:,z) = ems(z,1);                      % GHG emission coefficients
    w(:,:,z) = ws(z,1);                            % Wage rates
    mup0(:,:,z) = mus(z,1);                        % Markups
    mup1(:,:,z) = 0.001*(1-mus(z,1));              % Sensitivities of markups to output gaps
    psi_int(:,:,z) = psi_ints(z);                  % Shares of imported inputs (to total inputs)
    gov_j(:,:,z) = zetas(z,1) * gov0;              % Real government expenditures by industry
    gammaN(:,:,z) = gammaNs(z,1);                  % Speeds of adjustment of employment levels to shocks
    emis_adj(:,:,z) = emis_adjs(z,1)/1000;         % Emission adjustments
    n_adj(:,:,z) = n_adjs(z,1)/10;                 % Employment adjustments
end

%%  Attribute values to matrix A of technical coefficients

% Convert coeff_data to numeric matrix (if not numeric already)
coeff_numeric_cells = coeff_data(2:end, 2:end);

% Assign initial values to technical coefficients, excluding first row and column
aji = cellfun(@(x) double(string(x)), coeff_numeric_cells);

% Initialise the 4D matrix A4
nIndustries = size(aji, 1);

for z1 = 1:nIndustries
    for z2 = 1:nIndustries
        % Assign the scalar aji(z1,z2) to the entire 2D slice A4(:,:,z1,z2)
        A4(:, :, z1, z2) = aji(z1, z2);
    end
end


%% Create a progress bar equivalent (text-based)
totalSteps = nScenarios * (nPeriods-1);
fprintf('Progress: 0%%');

stepCounter = 0;

for j = 1:nScenarios
    
    for i = 2:nPeriods
        
        % Update progress bar (simple text-based update every step)
        stepCounter = stepCounter + 1;
        progressPercent = floor((stepCounter / totalSteps) * 100);
        fprintf('\b\b\b\b%3d%%', progressPercent);
        
        % Scenario 2: higher share of renewable energy and green productions following 100 bn government spending
        if j == 2 && i > 16 && i < nPeriods
            logisticTerm = 1 / (1 + exp(-0.75 * (i - 21)));
            logisticDeriv = 0.75 * exp(-0.75 * (i - 21)) / (1 + exp(-0.75 * (i - 21)))^2;
            
            % Effects on renewable energy variables
            renewD(j, i+1) = 0.4 + 0.25 * logisticTerm;
            renewA(j, i+1) = 0.2 + 0.05 * logisticTerm;
            renewE(j, i+1) = 0.5 + 0.05 * logisticTerm;
            renewF(j, i+1) = 0.05 + 0.05 * logisticTerm;
            renewH(j, i+1) = 0.8 + 0.05 * logisticTerm;
            
            % Government spending adjustments for renewable sources
            % Note: Using element-wise operations assuming indexing matches
            g0_j(j, 17:26, 5) = zeta(j, i, 5) * gov0 + ...
                (0.27 * 115 * logisticDeriv + ...
                - (gov_j(j, i-1, 5) - zeta(j, i-1, 5) * gammag(j, i) * (def(j, i-1) / pg(j, i-1))));
            
            g0_j(j, 17:26, 1) = zeta(j, i, 1) * gov0 + ...
                (0.08 * 115 * logisticDeriv + ...
                - (gov_j(j, i-1, 1) - zeta(j, i-1, 1) * gammag(j, i) * (def(j, i-1) / pg(j, i-1))));
            
            g0_j(j, 17:26, 6) = zeta(j, i, 6) * gov0 + ...
                (0.17 * 115 * logisticDeriv + ...
                - (gov_j(j, i-1, 6) - zeta(j, i-1, 6) * gammag(j, i) * (def(j, i-1) / pg(j, i-1))));
            
            g0_j(j, 17:26, 7) = zeta(j, i, 7) * gov0 + ...
                (0.18 * 115 * logisticDeriv + ...
                - (gov_j(j, i-1, 7) - zeta(j, i-1, 7) * gammag(j, i) * (def(j, i-1) / pg(j, i-1))));
            
            g0_j(j, 17:26, 9) = zeta(j, i, 9) * gov0 + ...
                (0.30 * 115 * logisticDeriv + ...
                - (gov_j(j, i-1, 9) - zeta(j, i-1, 9) * gammag(j, i) * (def(j, i-1) / pg(j, i-1))));
            
            % Update gammag
            gammag(j, i) = 0.02;
        end
        
        % Define (max) iterations for converging to simultaneous solution
        for iterations = 1:max_iterations

            % Model equations
            
            %% 1) Industrial structure

            % Extract 2D matrix of technical coefficients for scenario j and period i
            A = squeeze(A4(j, i, :, :));           % size: nIndustries x nIndustries

            % Extract auxiliary 2D matrix for baseline scenario and period (1,1)
            B = squeeze(A4(1, 1, :, :));

            % Final domestic demand vector in real terms (nIndustries x 1 vector)
            d(j,i,:) = squeeze(betaw(j,i,:)) * cw(j,i) + squeeze(betaz(j,i,:)) * cz(j,i) + ...
                        squeeze(iota(j,i,:)) * id(j,i) + squeeze(gov_j(j,i,:)) + ...
                        squeeze(chi(j,i,:)) * ex(j,i);

            % Real gross output (solve (I-A)*x = d)
            x(j,i,:) = (eye(nIndustries) - squeeze(A4(j,i,:,:))) \ squeeze(d(j,i,:));

            % Value of gross output for the whole economy (scalar)
            yg(j,i) = squeeze(p(j,i,:))' * squeeze(x(j,i,:));

            % Value added of the economy (GDP) (scalar)
            yn(j,i) = squeeze(p(j,i,:))' * squeeze(d(j,i,:)) - ...
                        squeeze(p_im(j,i,:))' * squeeze(psi(j,i,:)) * im(j,i);
            
            %% 2) Price setting
            if i < 6
               for z = 1:nIndustries
                    index = [1:z-1, z+1:nIndustries]; % All indices except z
        
                    % Get the current A matrix slice
                    current_A = squeeze(A4(j,i,:,:));
        
                    % Split the input-output matrix into domestic and imported shares
                    A_imported = current_A(index, z) .* squeeze(psi_int(j,i,z));
                    A_domestic = current_A(index, z) .* (1 - squeeze(psi_int(j,i,z)));
        
                    % Total intermediate costs adjusted for imports
                    total_intermediate_costs = sum(squeeze(p_init(j,i,index)) .* A_domestic) + ...
                                             sum(squeeze(p_im(j,i,index)) .* xr(j,i) .* A_imported);
                    
                    % Production prices adjusted for imports (initial values)
                    denominator = 1 - current_A(z,z) * (1 + squeeze(mup(j,i,z)));
                    
                    if denominator == 0
                        p_init(j,i,z) = 1;
                    else
                        p_init(j,i,z) = (total_intermediate_costs * ...
                                        (1 + squeeze(kappa(j,i,z)) * delta(j,i)) * ...
                                        (1 + squeeze(mup(j,i,z))) + ...
                                        w(j,i,z) * squeeze(lab(j,i,z))) / denominator;
                    end
                    
                    % Handle potential infinities
                    if isinf(p_init(j,i,z))
                        p_init(j,i,z) = 1;
                    end
                end
            else
                for z = 1:nIndustries
                    index = [1:z-1, z+1:nIndustries]; % All indices except z
                    
                    % Get the current A matrix slice
                    current_A = squeeze(A4(j,i,:,:));
                    
                    % Split the input-output matrix into domestic and imported shares
                    A_imported = current_A(index, z) .* squeeze(psi_int(j,i,z));
                    A_domestic = current_A(index, z) .* (1 - squeeze(psi_int(j,i,z)));
                    
                    % Total intermediate costs adjusted for imports
                    total_intermediate_costs = sum(squeeze(p_init(j,i,index)) .* A_domestic) + ...
                                             sum(squeeze(p_im(j,i,index)) .* xr(j,i) .* A_imported);
                    
                    % Production prices adjusted for imports
                    denominator = 1 - current_A(z,z) * (1 + squeeze(mup(j,i,z)));
                    
                    if denominator == 0
                        p_init(j,i,z) = 1;
                    else
                        p_init(j,i,z) = (total_intermediate_costs * ...
                                        (1 + squeeze(kappa(j,i,z)) * delta(j,i)) * ...
                                        (1 + squeeze(mup(j,i,z))) + ...
                                        w(j,i,z) * squeeze(lab(j,i,z))) / denominator;
                    end
                    
                    % Normalized prices
                    p(j,i,z) = p_init(j,i,z) / p_init(j,2,z);
                end
            end

            % Production prices normalized to 1
            mup(j,i,:) = squeeze(mup0(j,i,:)) + squeeze(mup1(j,i,:)) .* ...
                         (squeeze(x(j,i-1,:)) - squeeze(xN(j,i-1,:)));  % Mark-ups over direct costs
            
            % Potential output calculation
            if i < 6
                xN(j,i,:) = x(j,i,:);
            else
                xN(j,i,:) = squeeze(xN(j,i-1,:)) + squeeze(phi(j,i,:)) .* ...
                           (squeeze(x(j,i-1,:)) - squeeze(xN(j,i-1,:)));
            end
            
            % Calculate average prices using matrix multiplication
            pw(j,i) = squeeze(p(j,i,:))' * squeeze(betaw(j,i,:));      % Average price of workers' consumption
            pz(j,i) = squeeze(p(j,i,:))' * squeeze(betaz(j,i,:));      % Average price of rentiers' consumption
            pid(j,i) = squeeze(p(j,i,:))' * squeeze(iota(j,i,:));      % Average price of investment
            pg(j,i) = squeeze(p(j,i,:))' * squeeze(zeta(j,i,:));       % Average price of government spending
            px(j,i) = squeeze(p(j,i,:))' * squeeze(chi(j,i,:));        % Average price of export
            
            % Average price of import (with exchange rate adjustment)
            pm(j,i) = squeeze(p_im(j,i,:))' * squeeze(psi(j,i,:)) * xr(j,i);
            
            % GDP deflator calculation
            pindex(j,i) = yn(j,i) / (cw(j,i) + cz(j,i) + id(j,i) + gov(j,i) + ex(j,i) - im(j,i));

            %% 3) Households (except for portfolio equations)
            if i < 6
                ydw(j,i) = cw0;
                ydz(j,i) = ctot0 - cw0;
            else
                % Disposable income of workers (net of taxes)
                ydw(j,i) = (wb(j,i)*(1-omega) + paymw_m(j,i) + paymw_e(j,i) + ...
                           paymw_q(j,i) + paymw_b(j,i) - paymw_h(j,i) - taxw(j,i));
                
                % Disposable income of rentiers (net of taxes)
                ydz(j,i) = (wb(j,i)*omega + pB(j,i) + pf(j,i)*(1-eta) + paymz_m(j,i) + ...
                           paymz_e(j,i) + paymz_q(j,i) + paymz_b(j,i) - paymz_h(j,i) - taxz(j,i));
            end
            
            % Total disposable income of households
            yd(j,i) = ydw(j,i) + ydz(j,i);
            
            % Wealth accumulation
            vw(j,i) = vw(j,i-1) + ydw(j,i) - cw(j,i)*pw(j,i);  % Stock of wealth of workers
            vz(j,i) = vz(j,i-1) + ydz(j,i) - cz(j,i)*pz(j,i);  % Stock of wealth of rentiers
            vh(j,i) = vw(j,i) + vz(j,i);                       % Total stock of wealth
            
            if i < 6
                cw(j,i) = cw0;
                cz(j,i) = ctot0 - cw0;
                
                % Calculate consumption propensities
                alpha1w(j,i) = (cw(j,i) - alpha0w(j,i) - alpha2w*(vw(j,i-1)/pw(j,i))) / ...
                              (ydw(j,i)/pw_e(j,i));
                alpha1z(j,i) = (cz(j,i) - alpha0z(j,i) - alpha2z*(vz(j,i-1)/pz(j,i))) / ...
                              (ydz(j,i)/pz_e(j,i));
            else
                % Real consumption of workers
                cw(j,i) = (alpha0w(j,i) + alpha1w(j,i)*((ydw(j,i)+cgw(j,i))/pw_e(j,i)) + ...
                          alpha2w*(vw(j,i-1)/pw(j,i)));
                
                % Real consumption of rentiers
                cz(j,i) = (alpha0z(j,i) + alpha1z(j,i)*((ydz(j,i)+cgz(j,i))/pz_e(j,i)) + ...
                          alpha2z*(vz(j,i-1)/pz(j,i)));
                
                % Update consumption propensities
                alpha1w(j,i) = alpha1w(j,i-1);
                alpha1z(j,i) = alpha1z(j,i-1);
                
                % Endogenous propensity to consume out of workers' income
                alpha1w(j,i) = alpha1w(j,i-1) - alpha1w_1*(rl(j,i) - rl(j,i-1)/2 - rl(j,i-2)/2);
            end
            
            % Loan dynamics
            if i < 6
                lw(j,i) = lw0;
                lz(j,i) = lz0;
                deltaw(j,i) = (thetaw(j,i)*ydw(j,i))/lw(j,i-1);
                deltaz(j,i) = (thetaz(j,i)*ydz(j,i))/lz(j,i-1);
            else
                % Personal loans demanded by workers
                lw(j,i) = lw(j,i-1) + thetaw(j,i)*ydw(j,i) - deltaw(j,i)*lw(j,i-1);
                
                % Personal loans demanded by rentiers
                lz(j,i) = lz(j,i-1) + thetaw(j,i)*ydz(j,i) - deltaz(j,i)*lz(j,i-1);
                
                deltaw(j,i) = deltaw(j,i-1);
                deltaz(j,i) = deltaz(j,i-1);
            end
            
            % Loan-to-income ratios
            thetaw(j,i) = thetaw0 - thetaw1 * rl(j,i-1);  % Workers' ratio
            thetaz(j,i) = thetaz0 - thetaz1 * rl(j,i-1);  % Rentiers' ratio

            %% 4) Non-financial firms
            if i < 6
                kt(j,i) = k0;
                % Correction factor to obtain kt=k0
                corr_k = kt(j,i) / (squeeze(p(j,i-1,:))' * (squeeze(kappa(j,i-1,:)) .* squeeze(x(j,i-1,:))) / pid(j,i-1));
            else
                % Target capital stock
                kt(j,i) = corr_k * exp(gk*i) * (squeeze(p(j,i-1,:))' * (squeeze(kappa(j,i-1,:)) .* squeeze(x(j,i-1,:))) / pid(j,i-1));
            end
            
            if i < 6
                id(j,i) = id0;                % Real investment in fixed capital
                da(j,i) = id0;
                delta(j,i) = da(j,i) / k(j,i-1);
            else
                % Real investment in fixed capital
                id(j,i) = gamma * (kt(j,i) - k(j,i-1)) + da(j,i);
                % Depreciation allowances in real terms
                da(j,i) = delta(j,i) * k(j,i-1);
                delta(j,i) = delta(j,i-1);
            end
            
            % Fixed capital stock in real terms
            k(j,i) = k(j,i-1) + id(j,i) - da(j,i);
            
            % Current nominal value of capital stock
            kn(j,i) = kn(j,i-1) + pid(j,i)*id(j,i) - af(j,i);
            
            % Amortization funds
            af(j,i) = da(j,i) * pid(j,i-1);
            
            % Total profit of firms
            pf(j,i) = yn(j,i) - paym_l(j,i) - af(j,i) - paymz_e(j,i) - paymw_e(j,i) - wb(j,i);
            
            % Retained or undistributed profit (in addition to AF)
            upf(j,i) = eta * pf(j,i);
            
            % Supply of private securities
            es(j,i) = eh(j,i);
            
            %% 5) Banks, initial finance and final finance (funding)
            % Initial finance to production (including purchase of investment goods)
            fin_i(j,i) = wb(j,i) + pid(j,i)*id(j,i);
            
            % Final finance obtained by firms (including purchase of investment goods)
            fin_f(j,i) = (cw(j,i)*pw(j,i) + cz(j,i)*pz(j,i) + pid(j,i)*id(j,i) + ...
                         pg(j,i)*gov(j,i) + px(j,i)*ex(j,i) - pm(j,i)*im(j,i) + ...
                         (es(j,i) - es(j,i-1)) + upf(j,i) - ...
                         (paym_l(j,i) + paymw_e(j,i) + paymz_e(j,i) + pf(j,i)));



            %% 5.B) Industry-specific finance, investment and profit
            for z = 1:nIndustries
                % Initial finance by industry
                fin_i_j(j,i,z) = w(j,i,z)*x(j,i-1,z)*lab(j,i-1,z) + pid(j,i)*id_j(j,i,z);
                
                if id(j,i) == 0
                    fin_f_j(j,i,z) = 0;
                else
                    % Final finance by industry
                    fin_f_j(j,i,z) = p(j,i,z)*d(j,i,z) - pf_j(j,i,z) + ...
                                    ((es(j,i) - es(j,i-1)) - ...
                                    (paym_l(j,i) + paymw_e(j,i) + paymz_e(j,i))) * ...
                                    (id_j(j,i,z)/id(j,i));
                end
                
                % Target capital stock by industry
                kt_j(j,i,z) = p(j,i-1,z)*kappa(j,i-1,z)*x(j,i-1,z)/pid(j,i-1);
                
                % Real investment by industry
                id_j(j,i,z) = gamma*(kt_j(j,i,z)-k_j(j,i-1,z)) + delta(j,i)*k_j(j,i-1,z);
                
                % Real capital stock by industry
                k_j(j,i,z) = k_j(j,i-1,z) + gamma*(kt_j(j,i,z) - k_j(j,i-1,z));
                
                if id(j,i) == 0
                    rev_j(j,i,z) = 0;
                    cost_j(j,i,z) = 0;
                else
                    % Total revenue by industry
                    rev_j(j,i,z) = p(j,i,z)*d(j,i,z);
                    
                    % Total cost by industry
                    cost_j(j,i,z) = w(j,i,z)*x(j,i-1,z)*lab(j,i-1,z) + ...
                                   (af(j,i) + paym_l(j,i) + paymz_e(j,i) + ...
                                   paymw_e(j,i)) * (id_j(j,i,z)/id(j,i));
                    
                    % Profit by industry
                    pf_j(j,i,z) = rev_j(j,i,z) - cost_j(j,i,z);
                end
            end
            
            %% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            % Stock of debt (bank loans) of firms at the end of the period
            lf(j,i) = lf(j,i-1) + fin_i(j,i) - fin_f(j,i);
            
            % Total demand for bank loans
            ld(j,i) = lf(j,i) + lw(j,i) + lz(j,i);
            
            % Supply of bank loans
            ls(j,i) = ls(j,i-1) + (ld(j,i) - ld(j,i-1));
            
            if i < 6
                hb(j,i) = hb0;                     % Banks' reserves at the CB
                rho(j,i) = hb(j,i)/ms(j,i-1);
            else
                hb(j,i) = rho(j,i)*ms(j,i-1);
                rho(j,i) = rho(j,i-1);
            end
            
            % Government securities held by the banks
            bb(j,i) = ms(j,i) - ld(j,i) - hb(j,i);
            
            ad(j,i) = 0;
            
            % Supply of bank deposits
            ms(j,i) = mh(j,i);
            
            % Bank profit
            pB(j,i) = (paym_l(j,i) + paymb_b(j,i) + paym_r(j,i) + ...
                      paym_h(j,i) - paym_m(j,i) - paym_a(j,i));

            %% 6) Employment and wages
            if i < 6
                wb(j,i) = wb0;
            else
                % Total wage bill (dot product of employment and wage vectors)
                wb(j,i) = squeeze(n(j,i,:))' * squeeze(w(j,i,:));
            end
            
            if i < 6
                % Employment level by industry (with adjustment factor)
                n(j,i,:) = squeeze(x(j,i,:)) .* squeeze(lab(j,i,:)) + squeeze(n_adj(j,i,:));
            else
                % Employment level by industry (with partial adjustment)
                n(j,i,:) = squeeze(gammaN(j,i,:)) .* (squeeze(x(j,i,:)) .* squeeze(lab(j,i,:)) + ...
                           squeeze(n_adj(j,i,:))) + (1 - squeeze(gammaN(j,i,:))) .* squeeze(n(j,i-1,:));
            end
            
            % Total employment (sum across industries)
            emp(j,i) = sum(squeeze(n(j,i,:)));
            
            % Labor productivity by industry (inverse of labor coefficient)
            pr(j,i,:) = 1 ./ squeeze(lab(j,i,:));
            
            % 7) Interest rates and payments
            rm(j,i) = r_bar(j,i) + mum(j,i);     % Deposit rate
            rl(j,i) = r_bar(j,i) + mul(j,i);     % Loan rate
            re(j,i) = r_bar(j,i) + mue(j,i);     % Private securities rate
            rb(j,i) = r_bar(j,i) + mub(j,i);     % Government securities rate
            ra(j,i) = r_bar(j,i);                % Advances rate
            rr(j,i) = r_bar(j,i) + mur(j,i);     % Reserves rate (mur < 0)
            rq(j,i) = r_f(j,i) + muf(j,i);       % Foreign bills rate
            
            if i < 6
                % Initialize all interest payments
                paymw_b(j,i) = paymw_b0;
                paymz_b(j,i) = paymz_b0;
                paymb_b(j,i) = paymb_b0;
                paymf_b(j,i) = paymf_b0;
                paym_b(j,i) = paym_b0;
                paymw_h(j,i) = paymw_h0;
                paymz_h(j,i) = paymz_h0;
                paym_h(j,i) = paym_h0;
                paym_l(j,i) = paym_l0;
                paymw_e(j,i) = paymw_e0;
                paymz_e(j,i) = paymz_e0;
                paym_e(j,i) = paym_e0;
                paymw_q(j,i) = paymw_q0;
                paymz_q(j,i) = paymz_q0;
                paym_q(j,i) = paym_q0;
            else
                % Calculate interest payments based on previous period holdings
                paymw_b(j,i) = rb(j,i-1)*bw(j,i-1);       % Gov securities to workers
                paymz_b(j,i) = rb(j,i-1)*bz(j,i-1);       % Gov securities to rentiers
                paymb_b(j,i) = rb(j,i-1)*bb(j,i-1);       % Gov securities to banks
                paymf_b(j,i) = rb(j,i-1)*bf(j,i-1);       % Gov securities to foreign sector
                paym_b(j,i) = paymw_b(j,i) + paymz_b(j,i) + paymb_b(j,i) + paymf_b(j,i);
                
                paymw_h(j,i) = rl(j,i-1)*lw(j,i-1);       % Personal loans to workers
                paymz_h(j,i) = rl(j,i-1)*lz(j,i-1);       % Personal loans to rentiers
                paym_h(j,i) = paymw_h(j,i) + paymz_h(j,i);
                
                paym_l(j,i) = rl(j,i-1)*lf(j,i-1);        % Bank loans to firms
                
                paymw_e(j,i) = re(j,i-1)*ew(j,i-1);       % Private securities to workers
                paymz_e(j,i) = re(j,i-1)*ez(j,i-1);       % Private securities to rentiers
                paym_e(j,i) = paymw_e(j,i) + paymz_e(j,i);
                
                paymw_q(j,i) = rq(j,i-1)*qw(j,i-1);       % Foreign bills to workers
                paymz_q(j,i) = rq(j,i-1)*qz(j,i-1);       % Foreign bills to rentiers
                paym_q(j,i) = paymw_q(j,i) + paymz_q(j,i);
            end
            
            % Additional interest payments (calculated every period)
            paymw_m(j,i) = rm(j,i-1)*mw(j,i-1);           % Bank deposits to workers
            paymz_m(j,i) = rm(j,i-1)*mz(j,i-1);           % Bank deposits to rentiers
            paym_m(j,i) = paymw_m(j,i) + paymz_m(j,i);    % Total deposit interest
            
            paym_a(j,i) = r_bar(j,i-1)*as(j,i-1);         % Advances from CB
            paym_r(j,i) = rr(j,i-1)*hb(j,i-1);            % Reserves at CB
            
            % Exchange rate related calculations
            rcg(j,i) = (xr(j,i)/xr(j,i-1))-1;             % Percentage capital gains
            cgw(j,i) = (xr(j,i)-xr(j,i-1))*qw(j,i-1);     % Capital gains - workers
            cgz(j,i) = (xr(j,i)-xr(j,i-1))*qz(j,i-1);     % Capital gains - rentiers

            %% 8) Government sector and central bank
            if i < 6
                taxz(j,i) = tax(j,i) - taxw(j,i);
                tax(j,i) = tax0;
                gov(j,i) = gov0;
                taxw(j,i) = taxw0;
                
                % Calculate tax rates
                tauw1(j,i) = (taxw(j,i) - (tauz(j,i)*(paymw_m(j,i) + paymw_e(j,i) + paymw_q(j,i) + paymw_b(j,i)) ...
                           + tauv(j,i)*vw(j,i-1))) / (wb(j,i)*(1-omega));
                       
                tauw2(j,i) = (taxz(j,i) - (tauz(j,i)*(pB(j,i) + pf(j,i) + paymz_m(j,i) + paymz_e(j,i) + paymz_q(j,i) ...
                           + paymz_b(j,i)) + tauv(j,i)*vz(j,i-1))) / (wb(j,i)*omega);
                       
                taxz(j,i) = tax(j,i) - taxw(j,i);
            else
                % Taxes paid by wage-earners
                taxw(j,i) = (tauw1(j,i)*(wb(j,i)*(1-omega)) + tauz(j,i)*(paymw_m(j,i) + paymw_e(j,i) + ...
                           paymw_q(j,i) + paymw_b(j,i)) + tauv(j,i)*vw(j,i-1));
                       
                % Total tax revenue
                tax(j,i) = taxw(j,i) + taxz(j,i);
                
                % Real government spending by industry
                gov_j(j,i,:) = squeeze(gov_j(j,i-1,:)) + squeeze(g0_j(j,i-1,:)) - ...
                              squeeze(zeta(j,i-1,:)) * gammag(j,i) * (def(j,i-1)/pg(j,i-1));
                          
                % Total government spending
                gov(j,i) = sum(squeeze(gov_j(j,i,:)));
                
                % Redefine shares of government spending
                zeta(j,i,:) = squeeze(gov_j(j,i,:)) / gov(j,i);
                
                % Taxes paid by rentiers
                taxz(j,i) = (tauw2(j,i)*wb(j,i)*omega + tauz(j,i)*(pB(j,i) + pf(j,i) + ...
                           paymz_m(j,i) + paymz_e(j,i) + paymz_q(j,i) + paymz_b(j,i)) + ...
                           tauv(j,i)*vz(j,i-1));
                       
                % Maintain tax rates
                tauw1(j,i) = tauw1(j,i-1);
                tauw2(j,i) = tauw2(j,i-1);
            end
            
            if i < 6
                def(j,i) = 0;
            else
                % Government deficit
                def(j,i) = (gov(j,i)*pg(j,i) + paym_b(j,i) + (paym_r(j,i) - paym_a(j,i)) - tax(j,i));
            end
            
            % Government securities
            bs(j,i) = bs(j,i-1) + def(j,i);
            bcb(j,i) = bs(j,i) - bh(j,i) - bb(j,i) - bf(j,i);
            
            % Cash and advances
            hs(j,i) = hs(j,i-1) + (bcb(j,i)-bcb(j,i-1));
            as(j,i) = ad(j,i);
            
            %% 9) Portfolio equations
            if i < 6
                % Initialize portfolio holdings
                hw(j,i) = hw0;
                hz(j,i) = hz0;
                bw(j,i) = bw0;
                bz(j,i) = bz0;
                ew(j,i) = ew0;
                ez(j,i) = ez0;
                qw(j,i) = qw0;
                qz(j,i) = qz0;
                
                % Calculate portfolio parameters
                lambdacw(j,i) = hw(j,i)/cw(j,i-1);
                lambdacz(j,i) = hz(j,i)/cz(j,i-1);
                
                lambda20w(j,i) = (bw(j,i) - (lambda21w*vw(j,i)*rm(j,i) + ...
                              lambda22w*vw(j,i)*rb(j,i) + lambda23w*vw(j,i)*re(j,i) + ...
                              lambda24w*ydw(j,i) + lambda25w*vw(j,i)*rq(j,i)))/vw(j,i);
                          
                lambda20z(j,i) = (bz(j,i) - (lambda21z*vz(j,i)*rm(j,i) + ...
                              lambda22z*vz(j,i)*rb(j,i) + lambda23z*vz(j,i)*re(j,i) + ...
                              lambda24z*ydz(j,i) + lambda25z*vz(j,i)*rq(j,i)))/vz(j,i);
                          
                % Similar calculations for other lambda parameters...
                % (Include all other lambda calculations following the same pattern)
                
            else
                % Portfolio demands
                hw(j,i) = lambdacw(j,i)*cw(j,i)*pw_e(j,i-1);
                hz(j,i) = lambdacz(j,i)*cz(j,i)*pz_e(j,i-1);
                
                bw(j,i) = (lambda20w(j,i)*vw(j,i) + lambda21w*vw(j,i)*rm(j,i) + ...
                         lambda22w*vw(j,i)*rb(j,i) + lambda23w*vw(j,i)*re(j,i) + ...
                         lambda24w*ydw(j,i) + lambda25w*vw(j,i)*(rq(j,i)+rcg(j,i)));
                     
                bz(j,i) = (lambda20z(j,i)*vz(j,i) + lambda21z*vz(j,i)*rm(j,i) + ...
                         lambda22z*vz(j,i)*rb(j,i) + lambda23z*vz(j,i)*re(j,i) + ...
                         lambda24z*ydz(j,i) + lambda25z*vz(j,i)*(rq(j,i)+rcg(j,i)));
                     
                % Similar calculations for ew, ez, qw, qz...
                % (Include all other portfolio demand equations following the same pattern)
                
                % Maintain portfolio parameters
                lambdacw(j,i) = lambdacw(j,i-1);
                lambdacz(j,i) = lambdacz(j,i-1);
                lambda20w(j,i) = lambda20w(j,i-1);
                lambda20z(j,i) = lambda20z(j,i-1);
                % (Include all other parameter maintenance equations)
            end
            
            % Aggregate portfolio demands
            hh(j,i) = hw(j,i) + hz(j,i);
            bh(j,i) = bw(j,i) + bz(j,i);
            eh(j,i) = ew(j,i) + ez(j,i);
            qh(j,i) = qw(j,i) + qz(j,i);
            
            % Deposit demands
            mw(j,i) = vw(j,i) + lw(j,i) - hw(j,i) - bw(j,i) - ew(j,i) - qw(j,i);
            mz(j,i) = vz(j,i) + lz(j,i) - hz(j,i) - bz(j,i) - ez(j,i) - qz(j,i);
            mh(j,i) = mw(j,i) + mz(j,i);

            %% 10) Foreign sector
            if i < 6
                ex(j,i) = ex0;
                im(j,i) = im0;
            else
                % Real export of final and intermediate products
                ex(j,i) = exp(eps0 - eps1*log(px(j,i)/pm(j,i)) + eps2*log(yf(j,i)));
                
                % Real import
                im(j,i) = exp(nu0 - nu1*log(pm(j,i-1)/px(j,i-1)) + nu2*log(yn(j,i)/pindex(j,i-1)));
            end
            
            % Auxiliary: intermediate import by industry (element-wise min)
            im_int(j,i,:) = min(im(j,i)*squeeze(psi(j,i,:)), squeeze(A4(j,i,:,:))'*squeeze(x(j,i,:)) .* squeeze(psi_int(j,i,:)));
            
            % Auxiliary: final import by industry
            im_fin(j,i,:) = im(j,i)*squeeze(psi(j,i,:)) - squeeze(im_int(j,i,:));
            
            % Auxiliary: nominal intermediate import
            nim_int(j,i) = squeeze(p(j,i,:))' * squeeze(im_int(j,i,:));
            
            % Auxiliary: nominal final import
            nim_fin(j,i) = squeeze(p(j,i,:))' * squeeze(im_fin(j,i,:));
            
            % Domestic bills held by foreign sector (TFM vertical constraint)
            bf(j,i) = bf(j,i-1) + (qs(j,i)-qs(j,i-1)) - cab(j,i);
            
            % Bills issued by foreign sectors
            qs(j,i) = qh(j,i);
            
            % Trade balance (of domestic country)
            tb(j,i) = (px(j,i)*ex(j,i)) - (pm(j,i)*im(j,i));
            
            % Current account balance (of domestic country)
            cab(j,i) = tb(j,i) + paym_q(j,i) - paymf_b(j,i);
            
            % Net international investment financial position (of domestic country)
            niip(j,i) = qs(j,i) - bf(j,i);
            
            if i < 6
                xr(j,i) = 1;
            else
                % Nominal exchange rate: Euros per 1 US dollar
                xr(j,i) = xr0(j,i) + (1 + r_f(j,i))*xre(j,i)/(1 + r_bar(j,i));
            end
            
            if i < 6
                yf(j,i) = yf0;
            else
                % Income of RoW
                yf(j,i) = yf(j,i-1)*(1+gf);
            end
            
            %% 11) Price expectations
            % Actual inflation faced by workers
            PIw(j,i) = (pw(j,i)/pw(j,i-1) - 1);
            
            % Workers' expected inflation (regressive, annual basis, normalized to 2% inflation)
            PIw_e(j,i) = PIw(j,i-1) + sigmaw*( (PI_t-0.02) - PIw(j,i-1));
            
            % Workers' expected price level
            pw_e(j,i) = pw(j,i-1)*(1 + PIw_e(j,i));
            
            % Actual inflation faced by rentiers
            PIz(j,i) = (pz(j,i)/pz(j,i-1) - 1);
            
            % Rentiers' expected inflation (regressive, annual basis, normalized to 2% inflation)
            PIz_e(j,i) = PIz(j,i-1) + sigmaz*( (PI_t-0.02) - PIz(j,i-1));
            
            % Rentiers' expected price level
            pz_e(j,i) = pz(j,i-1)*(1 + PIz_e(j,i));
            
            % Expected exchange rate
            xre(j,i) = xr(j,i-1) + sigmaxr1(j,i)*(xr_t(j,i) - xr(j,i-1));
            
            % Target exchange rate
            xr_t(j,i) = xr_t(j,i-1) - sigmaxr2(j,i)*cab(j,i);
            
            %% 12) Greenhouse gas emissions
            % Total emissions by industry (adjusted to match 2021 data)
            emis_j(j,i,:) = squeeze(vareps(j,i,:)) .* squeeze(x(j,i,:)) + squeeze(emis_adj(j,i,:));
            
            % Correct emissions for specific industries to account for renewable sources
            emis_j(j,i,1) = varepsA(j,i)*x(j,i,1) * (1-renewA(j,i));  % Agriculture
            emis_j(j,i,5) = varepsD(j,i)*x(j,i,5) * (1-renewD(j,i));  % Energy
            emis_j(j,i,6) = varepsE(j,i)*x(j,i,6) * (1-renewE(j,i));  % Water supply
            emis_j(j,i,7) = varepsF(j,i)*x(j,i,7) * (1-renewF(j,i));  % Construction
            emis_j(j,i,9) = varepsH(j,i)*x(j,i,9) * (1-renewH(j,i));  % Transportation
            
            % Total emissions
            emis(j,i) = sum(squeeze(emis_j(j,i,1:nIndustries)));
            
            %% 13) Hidden equation
            % hs(j,i) = hh(j,i) + hb(j,i);  % (Commented out as in original)               
                        
            % Check the stopping condition
            if abs(hs(j, i) - hh(j, i) - hb(j, i)) < tolerance
                break
            end
            % (Place any iteration update code here if necessary)
        end
        
    end
end

fprintf('\n'); % Move to the next line after progress bar is complete
